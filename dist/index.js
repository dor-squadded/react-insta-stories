!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define("Stories",["React"],t):"object"==typeof exports?exports.Stories=t(require("react")):e.Stories=t(e.React)}(this,(function(e){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=7)}([function(t,r){t.exports=e},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.initialContext=void 0;var o=n(r(0));t.initialContext={defaultInterval:4e3,width:360,height:640};var i=o.default.createContext(t.initialContext);t.default=i},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.initialContext=void 0;var o=n(r(0));t.initialContext={stories:[]};var i=o.default.createContext(t.initialContext);t.default=i},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(0));t.default=o.default.createContext({currentId:0,videoDuration:0,bufferAction:!1,pause:!1,next:function(){}})},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=o(r(0)),a=o(r(17));t.default=function(e){var t=e.story,r=e.globalHeader,o=e.children;return i.default.createElement(i.default.Fragment,null,o,t.header&&i.default.createElement("div",{style:{position:"absolute",left:12,top:20,zIndex:19}},"object"===n(t)?r?r(t.header):i.default.createElement(a.default,{heading:t.header.heading,subheading:t.header.subheading,profileImage:t.header.profileImage}):null))}},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==r)return;var n,o,i=[],a=!0,u=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var i=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&i(t,e,r);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=u(r(0)),f=l(r(18));t.default=function(e){var t=e.story,r=e.action,o=e.customCollapsed,i=e.children,a=n(c.useState(!1),2),u=a[0],l=a[1],s=f.default;return c.default.createElement(c.default.Fragment,null,i,t.seeMore&&c.default.createElement("div",{style:{position:"absolute",margin:"auto",bottom:u?"unset":0,zIndex:9999,width:"100%",height:u?"100%":"auto"}},c.default.createElement(s,{action:r,toggleMore:function(e){r(e?"pause":"play"),l(e)},showContent:u,seeMoreContent:t.seeMore,customCollapsed:o||t.seeMoreCollapsed})))}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(0)),i=n(r(16));t.default=function(){return o.default.createElement(i.default,null)}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==r)return;var n,o,i=[],a=!0,u=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var a=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),u=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&a(t,e,r);return u(t,e),t},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WithSeeMore=t.WithHeader=void 0;var f=l(r(0)),s=c(r(8)),d=c(r(1)),y=c(r(2)),p=r(13),h=r(14),m=c(r(4)),v=c(r(5)),b=function(e){var t=e.renderers?e.renderers.concat(h.renderers):h.renderers,r={width:e.width,height:e.height,loader:e.loader,header:e.header,storyContainerStyles:e.storyContainerStyles,storyStyles:e.storyStyles,loop:e.loop,defaultInterval:e.defaultInterval,isPaused:e.isPaused,currentIndex:e.currentIndex,onStoryStart:e.onStoryStart,onStoryEnd:e.onStoryEnd,onAllStoriesEnd:e.onAllStoriesEnd,keyboardNavigation:e.keyboardNavigation,preventDefault:e.preventDefault},n=o(f.useState({stories:g(e.stories,t)}),2),i=n[0],a=n[1];return f.useEffect((function(){a({stories:g(e.stories,t)})}),[e.stories,e.renderers]),f.default.createElement(d.default.Provider,{value:r},f.default.createElement(y.default.Provider,{value:i},f.default.createElement(s.default,null)))},g=function(e,t){return e.map((function(e){var r={};"string"==typeof e?(r.url=e,r.type="image"):"object"===n(e)&&(r=Object.assign(r,e));var o=p.getRenderer(r,t);return r.originalContent=r.content,r.content=o,r}))};b.defaultProps={width:360,height:640,defaultInterval:4e3},t.WithHeader=m.default,t.WithSeeMore=v.default,t.default=b},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==r)return;var n,o,i=[],a=!0,u=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var i=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&i(t,e,r);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=u(r(0)),f=l(r(1)),s=l(r(2)),d=l(r(3)),y=l(r(9)),p=l(r(10));t.default=function(){var e=n(c.useState(0),2),t=e[0],r=e[1],o=n(c.useState(!0),2),i=o[0],a=o[1],u=n(c.useState(!0),2),l=u[0],m=u[1],v=n(c.useState(0),2),b=v[0],g=v[1],_=c.useRef(),O=c.useRef(!0),j=c.useContext(f.default),w=j.width,S=j.height,x=j.loop,M=j.currentIndex,E=j.isPaused,P=j.keyboardNavigation,A=j.preventDefault,C=j.storyContainerStyles,I=void 0===C?{}:C,D=j.onAllStoriesEnd,k=c.useContext(s.default).stories;c.useEffect((function(){"number"==typeof M&&(M>=0&&M<k.length?z((function(){return M})):console.error("Index out of bounds. Current index was set to value more than the length of stories array.",M))}),[M]),c.useEffect((function(){"boolean"==typeof E&&a(E)}),[E]),c.useEffect((function(){if("undefined"!=typeof window&&window.document&&"boolean"==typeof P&&P)return document.addEventListener("keydown",T),function(){document.removeEventListener("keydown",T)}}),[P]),c.useEffect((function(){return function(){O.current=!1}}),[]);var T=function(e){"ArrowLeft"===e.key?B():"ArrowRight"===e.key&&W()},R=function(e,t){a("pause"===e),m(!!t)},z=function(e){r(e),R("pause",!0)},B=function(){var e=0===M;console.log(e,M),z((function(e){return e>0?e-1:e}))},W=function(){O.current&&(x?U():N())},U=function(){z((function(e){return(e+1)%k.length}))},N=function(){z((function(e){return e<k.length-1?e+1:(D&&D(t,k),e)}))},H=function(e){e.preventDefault(),_.current=setTimeout((function(){R("pause")}),200)},V=function(e){return function(t){t.preventDefault(),_.current&&clearTimeout(_.current),i?R("play"):"next"===e?W():B()}};return c.default.createElement("div",{style:Object.assign(Object.assign(Object.assign({},h.container),I),{width:w,height:S})},c.default.createElement(d.default.Provider,{value:{bufferAction:l,videoDuration:b,currentId:t,pause:i,next:W}},c.default.createElement(p.default,null)),c.default.createElement(y.default,{action:R,bufferAction:l,playState:i,story:k[t],getVideoDuration:function(e){g(1e3*e)}}),!A&&c.default.createElement("div",{style:h.overlay},c.default.createElement("div",{className:"previous-story-button",style:{width:"50%",zIndex:999},onTouchStart:H,onTouchEnd:V("previous"),onMouseDown:H,onMouseUp:V("previous")}),c.default.createElement("div",{className:"next-story-button",style:{width:"50%",zIndex:999},onTouchStart:H,onTouchEnd:V("next"),onMouseDown:H,onMouseUp:V("next")})))};var h={container:{display:"flex",flexDirection:"column",background:"#111",position:"relative"},overlay:{position:"absolute",height:"inherit",width:"inherit",display:"flex"}}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=i(r(0)),l=a(r(1)),c={story:{display:"flex",position:"relative",overflow:"hidden",alignItems:"center"},storyContent:{width:"auto",maxWidth:"100%",maxHeight:"100%",margin:"auto"}};t.default=function(e){var t,r,n=u.useContext(l.default),o=n.width,i=n.height,a=n.loader,f=n.header,s=n.storyStyles,d=function(t,r){switch(t){case"UPDATE_VIDEO_DURATION":return e.getVideoDuration(r.duration),{ack:"OK"}}};return u.default.createElement("div",{style:Object.assign(Object.assign({},c.story),{width:o,height:i})},(t=e.story.content,r={width:o,height:i,loader:a,header:f,storyStyles:s},u.default.createElement(t,{action:e.action,isPaused:e.playState,story:e.story,config:r,messageHandler:d})))}},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==r)return;var n,o,i=[],a=!0,u=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var i=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&i(t,e,r);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var c=u(r(0)),f=l(r(11)),s=l(r(3)),d=l(r(1)),y=l(r(2));t.default=function(){var e=n(c.useState(0),2),t=e[0],r=e[1],o=c.useContext(s.default),i=o.currentId,a=o.next,u=o.videoDuration,l=o.pause,h=c.useContext(d.default),m=h.defaultInterval,v=h.onStoryEnd,b=h.onStoryStart,g=h.onAllStoriesEnd,_=c.useContext(y.default).stories;c.useEffect((function(){r(0)}),[i,_]),c.useEffect((function(){return l||(O.current=requestAnimationFrame(w)),function(){cancelAnimationFrame(O.current)}}),[i,l]);var O=c.useRef(),j=t,w=function e(){0===j&&S(),r((function(e){var t=E();return j=e+100/(t/1e3*60),e+100/(t/1e3*60)})),j<100?O.current=requestAnimationFrame(e):(x(),i===_.length-1&&M(),cancelAnimationFrame(O.current),a())},S=function(){b&&b(i,_[i])},x=function(){v&&v(i,_[i])},M=function(){g&&g(i,_)},E=function(){return"video"===_[i].type?u:"number"==typeof _[i].duration?_[i].duration:m};return c.default.createElement("div",{style:p.progressArr},_.map((function(e,r){return c.default.createElement(f.default,{key:r,count:t,width:1/_.length,active:r===i?1:r<i?2:0})})))};var p={progressArr:{display:"flex",justifyContent:"center",maxWidth:"100%",flexWrap:"row",position:"absolute",width:"98%",padding:5,paddingTop:7,alignSelf:"center",zIndex:1001,filter:"drop-shadow(0 1px 8px #222)"}}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=i(r(0)),l=a(r(12)),c=a(r(3));t.default=function(e){var t=u.useContext(c.default),r=t.bufferAction,n=t.pause,o=e.width,i=e.active;return u.default.createElement(l.default,{width:o,pause:n,bufferAction:r},u.default.createElement("div",{style:Object.assign(Object.assign({},function(t){switch(t.active){case 2:return{width:"100%"};case 1:return{transform:"scaleX(".concat(e.count/100,")")};case 0:default:return{width:0}}}({active:i})),f.inner)}))};var f={inner:{background:"#fff",height:"100%",maxWidth:"100%",borderRadius:2,transformOrigin:"center left",WebkitBackfaceVisibility:"hidden",MozBackfaceVisibility:"hidden",msBackfaceVisibility:"hidden",backfaceVisibility:"hidden",WebkitPerspective:1e3,MozPerspective:1e3,msPerspective:1e3,perspective:1e3}}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(0)),i=function(e){var t=e.width,r=e.pause,n=e.bufferAction;return{width:"".concat(100*t,"%"),opacity:r&&!n?0:1}},a={progress:{height:2,maxWidth:"100%",background:"#555",margin:2,borderRadius:2,transition:"opacity 400ms ease-in-out"}};t.default=function(e){return o.default.createElement("div",{style:Object.assign(Object.assign({},a.progress),i(e))},e.children)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getRenderer=void 0,t.getRenderer=function(e,t){var r=t.map((function(t){return Object.assign(Object.assign({},t),{testerResult:t.tester(e)})})).filter((function(e){return e.testerResult.condition}));return r.sort((function(e,t){return t.testerResult.priority-e.testerResult.priority})),r[0].renderer}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.renderers=void 0;var o=n(r(15)),i=n(r(19)),a=n(r(20)),u=n(r(21));t.renderers=[o.default,i.default,u.default,a.default]},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==r)return;var n,o,i=[],a=!0,u=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var i=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&i(t,e,r);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.tester=t.renderer=void 0;var c=u(r(0)),f=l(r(6)),s=l(r(4)),d=l(r(5));t.renderer=function(e){var t=e.story,r=e.action,o=(e.isPaused,e.config),i=n(c.useState(!1),2),a=i[0],u=i[1],l=o.width,p=o.height,h=o.loader,m=o.storyStyles,v=Object.assign(Object.assign({},y.storyContent),m||{});return c.createElement(s.default,{story:t,globalHeader:o.header},c.createElement(d.default,{story:t,action:r},c.createElement("div",null,c.createElement("img",{style:v,src:t.url,onLoad:function(){u(!0),r("play")}}),!a&&c.createElement("div",{style:{width:l,height:p,position:"absolute",left:0,top:0,background:"rgba(0, 0, 0, 0.9)",zIndex:9,display:"flex",justifyContent:"center",alignItems:"center",color:"#ccc"}},h||c.createElement(f.default,null)))))};var y={story:{display:"flex",position:"relative",overflow:"hidden"},storyContent:{width:"auto",maxWidth:"100%",maxHeight:"100%",margin:"auto"}};t.tester=function(e){return{condition:!(e.content||e.type&&"image"!==e.type),priority:2}},t.default={renderer:t.renderer,tester:t.tester}},function(e,t,r){"use strict";r.r(t);var n=r(0),o=r.n(n),i=["styles"];function a(){return(a=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}t.default=function(e){e.styles;var t=u(e,i);return o.a.createElement("svg",a({width:"44",height:"44",xmlns:"http://www.w3.org/2000/svg",stroke:"#fff"},t),o.a.createElement("g",{fill:"none",fillRule:"evenodd",strokeWidth:"2"},o.a.createElement("circle",{cx:"22",cy:"22",r:"1"},o.a.createElement("animate",{attributeName:"r",begin:"0s",dur:"1.8s",values:"1; 20",calcMode:"spline",keyTimes:"0; 1",keySplines:"0.165, 0.84, 0.44, 1",repeatCount:"indefinite"}),o.a.createElement("animate",{attributeName:"stroke-opacity",begin:"0s",dur:"1.8s",values:"1; 0",calcMode:"spline",keyTimes:"0; 1",keySplines:"0.3, 0.61, 0.355, 1",repeatCount:"indefinite"})),o.a.createElement("circle",{cx:"22",cy:"22",r:"1"},o.a.createElement("animate",{attributeName:"r",begin:"-0.9s",dur:"1.8s",values:"1; 20",calcMode:"spline",keyTimes:"0; 1",keySplines:"0.165, 0.84, 0.44, 1",repeatCount:"indefinite"}),o.a.createElement("animate",{attributeName:"stroke-opacity",begin:"-0.9s",dur:"1.8s",values:"1; 0",calcMode:"spline",keyTimes:"0; 1",keySplines:"0.3, 0.61, 0.355, 1",repeatCount:"indefinite"}))))}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(0)),i={main:{display:"flex",alignItems:"center"},img:{width:40,height:40,borderRadius:40,marginRight:10,filter:"drop-shadow(0 0px 2px rgba(0, 0, 0, 0.5))",border:"2px solid rgba(255, 255, 255, 0.8)"},text:{display:"flex",flexDirection:"column",filter:"drop-shadow(0 0px 3px rgba(0, 0, 0, 0.9))"},heading:{fontSize:"1rem",color:"rgba(255, 255, 255, 0.9)",margin:0,marginBottom:2},subheading:{fontSize:"0.6rem",color:"rgba(255, 255, 255, 0.8)",margin:0}};t.default=function(e){var t=e.profileImage,r=e.heading,n=e.subheading;return o.default.createElement("div",{style:i.main},t&&o.default.createElement("img",{style:i.img,src:t}),o.default.createElement("span",{style:i.text},o.default.createElement("p",{style:i.heading},r),o.default.createElement("p",{style:i.subheading},n)))}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var u=i(r(0)),l=a(r(1));t.default=function(e){var t=e.seeMoreContent,r=e.customCollapsed,n=u.useContext(l.default).keyboardNavigation;u.useEffect((function(){if("undefined"!=typeof window&&window.document&&"boolean"==typeof n&&n)return document.addEventListener("keydown",o),function(){document.removeEventListener("keydown",o)}}),[n]);var o=function(t){"ArrowUp"===t.key?(t.preventDefault(),e.toggleMore(!0)):"ArrowDown"!==t.key&&"Escape"!==t.key||(t.preventDefault(),e.toggleMore(!1))};return e.showContent?u.default.createElement("div",{style:c.seeMoreExpanded},u.default.createElement(t,{close:function(){return e.toggleMore(!1)}})):r?u.default.createElement(r,{action:e.action,toggleMore:e.toggleMore}):u.default.createElement("div",{style:c.seeMore,onClick:function(t){t.preventDefault(),t.stopPropagation(),e.toggleMore(!0)}},u.default.createElement("span",{style:c.seeMoreIcon},"⌃"),u.default.createElement("span",{style:c.seeMoreText},"See more"))};var c={seeMore:{height:"10vh",background:"linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.2))",display:"flex",flexDirection:"column",width:"100%",alignItems:"center",justifyContent:"flex-end",bottom:0},seeMoreExpanded:{position:"absolute",top:0,left:0,width:"100%",height:"100%",boxSizing:"border-box",zIndex:99999},seeMoreText:{color:"white",textAlign:"center",letterSpacing:"0.1em",marginBottom:"2.2vh",textTransform:"capitalize",opacity:"1",fontSize:"0.8em",transition:"opacity 300ms ease-in-out"},seeMoreIcon:{color:"white",textAlign:"center",letterSpacing:"0.2em",marginBottom:"0.4vh",opacity:"1",filter:"drop-shadow(0 0 5px black)",textTransform:"capitalize",transition:"opacity 300ms ease-in-out"},seeMoreClose:{position:"absolute",filter:"drop-shadow(0 3px 2px #ccc)",right:"0.5rem",top:"0.5rem",fontSize:"1.5rem",opacity:"0.7",padding:"1rem"}}},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==r)return;var n,o,i=[],a=!0,u=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var i=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),u=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&i(t,e,r);return a(t,e),t},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.tester=t.renderer=void 0;var c=u(r(0)),f=l(r(6)),s=l(r(4)),d=l(r(5));t.renderer=function(e){var t=e.story,r=e.action,o=e.isPaused,i=e.config,a=e.messageHandler,u=n(c.useState(!1),2),l=u[0],p=u[1],h=n(c.useState(!1),2),m=h[0],v=h[1],b=i.width,g=i.height,_=i.loader,O=i.storyStyles,j=Object.assign(Object.assign({},y.storyContent),O||{}),w=c.useRef(null);c.useEffect((function(){w.current&&(o?w.current.pause():w.current.play().catch((function(){})))}),[o]);return c.createElement(s.default,{story:t,globalHeader:i.header},c.createElement(d.default,{story:t,action:r},c.createElement("div",{style:y.videoContainer},c.createElement("video",{ref:w,style:j,src:t.url,controls:!1,onLoadedData:function(){a("UPDATE_VIDEO_DURATION",{duration:w.current.duration}),p(!0),w.current.play().then((function(){r("play")})).catch((function(){v(!0),w.current.play().finally((function(){r("play")}))}))},playsInline:!0,onWaiting:function(){r("pause",!0)},onPlaying:function(){r("play",!0)},muted:m,autoPlay:!0,"webkit-playsinline":"true"}),!l&&c.createElement("div",{style:{width:b,height:g,position:"absolute",left:0,top:0,background:"rgba(0, 0, 0, 0.9)",zIndex:9,display:"flex",justifyContent:"center",alignItems:"center",color:"#ccc"}},_||c.createElement(f.default,null)))))};var y={storyContent:{width:"auto",maxWidth:"100%",maxHeight:"100%",margin:"auto"},videoContainer:{display:"flex",alignItems:"center",justifyContent:"center"}};t.tester=function(e){return{condition:"video"===e.type,priority:2}},t.default={renderer:t.renderer,tester:t.tester}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.tester=t.renderer=void 0;var a=i(r(0));t.renderer=function(e){var t=e.story,r=e.action;return a.useEffect((function(){r("play")}),[t]),a.createElement("div",{style:u.storyContent},a.createElement("p",{style:u.text},"This story could not be loaded."))};var u={storyContent:{width:"100%",maxHeight:"100%",margin:"auto"},text:{textAlign:"center",color:"white",width:"90%",margin:"auto"}};t.tester=function(){return{condition:!0,priority:1}},t.default={renderer:t.renderer,tester:t.tester}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.tester=t.renderer=void 0;var a=i(r(0));t.renderer=function(e){a.useEffect((function(){e.action("play")}),[e.story]);var t=e.story.originalContent;return a.createElement(t,Object.assign({},e))},t.tester=function(e){return{condition:!!e.content,priority:2}},t.default={renderer:t.renderer,tester:t.tester}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,